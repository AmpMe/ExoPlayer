// Copyright (C) 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'com.android.library'
apply from: '../../constants.gradle'

group project.ext.releaseGroupId
version = project.ext.releaseVersion

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
    }

    // Workaround to prevent circular dependency on project :testutils.
    sourceSets {
        androidTest {
            java.srcDirs += "../../testutils/src/main/java/"
        }
        test {
            java.srcDirs += "../../testutils/src/main/java/"
        }
    }

    buildTypes {
        // Re-enable test coverage when the following issue is fixed:
        // https://issuetracker.google.com/issues/37019591
        // debug {
        //    testCoverageEnabled = true
        // }
        release {
            minifyEnabled false
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

dependencies {
    compile 'com.android.support:support-annotations:' + supportLibraryVersion
    androidTestCompile 'com.google.dexmaker:dexmaker:' + dexmakerVersion
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:' + dexmakerVersion
    androidTestCompile 'org.mockito:mockito-core:' + mockitoVersion
    testCompile 'com.google.truth:truth:' + truthVersion
    testCompile 'junit:junit:' + junitVersion
    testCompile 'org.mockito:mockito-core:' + mockitoVersion
    testCompile 'org.robolectric:robolectric:' + robolectricVersion
}

bintray {
    user = System.properties['bintray.user']
    key = System.properties['bintray.key']
    pkg {
        name = 'exoplayer'
        repo = 'maven'
        userOrg = 'ampme'
    }
    publish = true
    configurations = ['archives']
}

afterEvaluate {
    project.bintray {
        publish = true
        pkg {
            userOrg = 'ampme'
        }
    }
}

install {
    repositories {
        mavenInstaller {
            pom {
                project {
                    packaging 'aar'
                }
            }
        }
    }
}
